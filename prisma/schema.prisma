generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Player {
    id           Int           @id @default(autoincrement())
    createdAt    DateTime      @default(now()) @db.Timestamptz(6)
    firstName    String        @db.VarChar
    lastName     String        @db.VarChar
    nickname     String?       @db.VarChar
    role         Role
    teamId       Int?
    updatedAt    DateTime?     @updatedAt @db.Timestamptz(6)
    seasonId     Int
    season       Season        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    team         Team?         @relation(fields: [teamId], references: [id])
    performances Performance[]

    @@unique([firstName, lastName, nickname])
}

model Team {
    id           Int           @id @default(autoincrement())
    name         String        @unique @db.VarChar
    shortName    String        @db.VarChar
    createdAt    DateTime      @default(now()) @db.Timestamptz(6)
    updatedAt    DateTime?     @updatedAt @db.Timestamptz(6)
    seasonId     Int
    color        String        @db.VarChar
    awayGames    Game[]        @relation("AwayGames")
    homeGames    Game[]        @relation("HomeGames")
    players      Player[]
    season       Season[]
    performances Performance[]
}

model Season {
    id        Int       @id @default(autoincrement())
    endDate   DateTime? @unique @db.Date
    startDate DateTime? @unique @db.Date
    players   Player[]
    teams     Team[]
    oldGames  OldGame[]
}

model Game {
    id           Int           @id @default(autoincrement())
    homeTeamId   Int
    awayTeamId   Int
    gameType     GameType      @default(Regular)
    timestamp    DateTime      @db.Timestamptz(6)
    awayTeam     Team          @relation("AwayGames", fields: [awayTeamId], references: [id], onDelete: Cascade)
    homeTeam     Team          @relation("HomeGames", fields: [homeTeamId], references: [id], onDelete: Cascade)
    performances Performance[]
}

model OldGame {
    id        Int      @id @default(autoincrement())
    homeTeam  String
    awayTeam  String
    homeScore Int
    awayScore Int
    timestamp DateTime @db.Timestamptz(6)
    season    Season?  @relation(references: [id], fields: [seasonId])
    seasonId  Int?
}

model Performance {
    id             Int    @id @default(autoincrement())
    player         Player @relation(references: [id], fields: [playerId])
    playerId       Int
    team           Team   @relation(references: [id], fields: [teamId])
    teamId         Int
    game           Game   @relation(references: [id], fields: [gameId])
    gameId         Int
    goalsThrown    Int
    goalsCaught    Int
    defensivePlays Int
}

enum Role {
    Player
    Captain
    Substitute
}

enum GameType {
    PreSeason
    Regular
    Playoff
}

enum PlayType {
    GoalThrown
    GoalCaught
    DefensivePlay
}
